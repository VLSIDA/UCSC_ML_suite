//--------------------------------------------------------------------------------
// Auto-generated by LiteX (65f5463) on 2025-07-10 06:24:16
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* ETHPHY Registers */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x800L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x804L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x808L)
#define CSR_ETHPHY_MDIO_R_SIZE 1

/* ETHPHY Fields */
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1

/* ETHMAC Registers */
#define CSR_ETHMAC_BASE (CSR_BASE + 0x1000L)
#define CSR_ETHMAC_SRAM_WRITER_SLOT_ADDR (CSR_BASE + 0x1000L)
#define CSR_ETHMAC_SRAM_WRITER_SLOT_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_ADDR (CSR_BASE + 0x1004L)
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_ADDR (CSR_BASE + 0x1008L)
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_ADDR (CSR_BASE + 0x100cL)
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_ADDR (CSR_BASE + 0x1010L)
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_ADDR (CSR_BASE + 0x1014L)
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_SIZE 1
#define CSR_ETHMAC_SRAM_READER_START_ADDR (CSR_BASE + 0x1018L)
#define CSR_ETHMAC_SRAM_READER_START_SIZE 1
#define CSR_ETHMAC_SRAM_READER_READY_ADDR (CSR_BASE + 0x101cL)
#define CSR_ETHMAC_SRAM_READER_READY_SIZE 1
#define CSR_ETHMAC_SRAM_READER_LEVEL_ADDR (CSR_BASE + 0x1020L)
#define CSR_ETHMAC_SRAM_READER_LEVEL_SIZE 1
#define CSR_ETHMAC_SRAM_READER_SLOT_ADDR (CSR_BASE + 0x1024L)
#define CSR_ETHMAC_SRAM_READER_SLOT_SIZE 1
#define CSR_ETHMAC_SRAM_READER_LENGTH_ADDR (CSR_BASE + 0x1028L)
#define CSR_ETHMAC_SRAM_READER_LENGTH_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_ADDR (CSR_BASE + 0x102cL)
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_ADDR (CSR_BASE + 0x1030L)
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_ADDR (CSR_BASE + 0x1034L)
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_SIZE 1
#define CSR_ETHMAC_PREAMBLE_CRC_ADDR (CSR_BASE + 0x1038L)
#define CSR_ETHMAC_PREAMBLE_CRC_SIZE 1
#define CSR_ETHMAC_RX_DATAPATH_PREAMBLE_ERRORS_ADDR (CSR_BASE + 0x103cL)
#define CSR_ETHMAC_RX_DATAPATH_PREAMBLE_ERRORS_SIZE 1
#define CSR_ETHMAC_RX_DATAPATH_CRC_ERRORS_ADDR (CSR_BASE + 0x1040L)
#define CSR_ETHMAC_RX_DATAPATH_CRC_ERRORS_SIZE 1

/* ETHMAC Fields */
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_AVAILABLE_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_AVAILABLE_SIZE 1
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_AVAILABLE_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_EVENT0_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_EVENT0_SIZE 1
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_EVENT0_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* ETHPHY Access Functions */
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}

/* ETHMAC Access Functions */
static inline uint32_t ethmac_sram_writer_slot_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline uint32_t ethmac_sram_writer_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline uint32_t ethmac_sram_writer_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline uint32_t ethmac_sram_writer_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x100cL));
}
static inline uint32_t ethmac_sram_writer_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010L));
}
static inline void ethmac_sram_writer_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010L));
}
static inline uint32_t ethmac_sram_writer_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1014L));
}
static inline void ethmac_sram_writer_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1014L));
}
static inline uint32_t ethmac_sram_reader_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x1018L));
}
static inline void ethmac_sram_reader_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1018L));
}
static inline uint32_t ethmac_sram_reader_ready_read(void) {
	return csr_read_simple((CSR_BASE + 0x101cL));
}
static inline uint32_t ethmac_sram_reader_level_read(void) {
	return csr_read_simple((CSR_BASE + 0x1020L));
}
static inline uint32_t ethmac_sram_reader_slot_read(void) {
	return csr_read_simple((CSR_BASE + 0x1024L));
}
static inline void ethmac_sram_reader_slot_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1024L));
}
static inline uint32_t ethmac_sram_reader_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x1028L));
}
static inline void ethmac_sram_reader_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1028L));
}
static inline uint32_t ethmac_sram_reader_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x102cL));
}
static inline uint32_t ethmac_sram_reader_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1030L));
}
static inline void ethmac_sram_reader_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1030L));
}
static inline uint32_t ethmac_sram_reader_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1034L));
}
static inline void ethmac_sram_reader_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1034L));
}
static inline uint32_t ethmac_preamble_crc_read(void) {
	return csr_read_simple((CSR_BASE + 0x1038L));
}
static inline uint32_t ethmac_rx_datapath_preamble_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x103cL));
}
static inline uint32_t ethmac_rx_datapath_crc_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x1040L));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
